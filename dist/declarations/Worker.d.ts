export const WorkerProperties: string[];
export default Worker;
export type WorkerOptions = {
    connectActivitySid?: string | undefined;
    closeExistingSessions?: boolean | undefined;
    logLevel?: string | undefined;
    region?: string | undefined;
};
export type WorkerDeps = {
    Request: Request;
    EventBridgeSignaling: EventBridgeSignaling;
};
export type WorkerTaskOptions = {
    attributes?: Record<any, any> | undefined;
    taskChannelUniqueName?: string | undefined;
    taskChannelSid?: string | undefined;
};
declare class Worker extends EventEmitter {
    constructor(token: string, options?: WorkerOptions | undefined, deps?: WorkerDeps | undefined);
    private _connectActivitySid;
    private _closeExistingSessions;
    private _logLevel;
    private _config;
    private _log;
    private _request;
    private _dataServices;
    private _routes;
    private _connectRetry;
    private _signaling;
    private retryUtil;
    private taskRouterEventHandler;
    readonly activity: typeof import("./Activity");
    readonly accountSid: string;
    readonly attributes: Record<any, any>;
    readonly dateCreated: Date;
    readonly dateStatusChanged: Date;
    readonly dateUpdated: Date;
    readonly name: string;
    readonly sid: string;
    readonly workspaceSid: string;
    version: string;
    readonly workerSid: string;
    readonly workerActivitySid: string;
    readonly friendlyName: string;
    readonly dateActivityChanged: Date;
    createTask(to: string, from: string, workflowSid: string, taskQueueSid: string, options?: WorkerTaskOptions | undefined): Promise<string>;
    getLogger(prefix: string): Logger;
    setAttributes(attributes: Record<any, any>): Promise<Worker>;
    _bumpVersion(): void;
    updateToken(newToken: string): void;
    fetchLatestVersion(): Promise<Worker>;
    private _subscribeToSignalingEvents;
    private _subscribeToTaskRouterEvents;
    private _unSubscribeFromTaskRouterEvents;
    private _initialize;
    get channels(): Map<string, typeof import("./Channel")>;
    get activities(): Map<string, typeof import("./Activity")>;
    get reservations(): Map<string, typeof import("./Reservation")>;
    private _setCurrentActivity;
    private _setWorkerConnectActivity;
    private _updateWorkerActivity;
    private _update;
    disconnect(): void;
    getRoutes(): Routes;
}
import Request from "./util/Request";
import EventBridgeSignaling from "./signaling/EventBridgeSignaling";
import { EventEmitter } from "events";
import Logger from "./util/Logger";
import Routes from "./util/Routes";
